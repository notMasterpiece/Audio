{"ast":null,"code":"import _taggedTemplateLiteral from \"/Grawdanin/MERN/audio/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelAudioInfo.js\";\n\nfunction _templateObject4() {\n  const data = _taggedTemplateLiteral([\"\\n  max-width: 100%;\\n\"]);\n\n  _templateObject4 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  const data = _taggedTemplateLiteral([\"\\n  margin: 0;\\n  font-size: 18px;\\n  color: #777777;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n\"]);\n\n  _templateObject3 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 60px;\\n  min-width: 60px;\\n  height: 60px;\\n  margin-right: 10px;\\n  border-radius: 5px;\\n  overflow: hidden;\\n  position: relative;\\n  img {\\n    max-width: 100%;\\n      width: 100%;\\n      height: 100%;\\n      object-fit: cover;\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  width: 400px;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport PlayAnimation from '../../components/AudioVizyalizations/SmallCssVizyalization/PlayAnimation';\nimport loader from '../../assets/images/loader.gif';\nimport { normalizeAudioCurentTime } from \"../../helpers/helpers\";\nconst AudioWrap = styled.div(_templateObject());\nconst AudioImage = styled.div(_templateObject2());\nconst AudioName = styled.h2(_templateObject3());\nconst AudioInfo = styled.div(_templateObject4());\n\nconst PlayPanelAudioInfo = ({\n  duration,\n  currentTime,\n  isPlaying,\n  currentAudioObj,\n  isLoading\n}) => {\n  if (isLoading) {\n    return React.createElement(AudioWrap, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, React.createElement(AudioImage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: loader,\n      alt: currentAudioObj.title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Loading ...\")));\n  }\n\n  return React.createElement(AudioWrap, {\n    title: currentAudioObj.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(AudioImage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    src: currentAudioObj.image,\n    alt: currentAudioObj.title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), isPlaying && React.createElement(PlayAnimation, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }))), React.createElement(AudioInfo, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(AudioName, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, currentAudioObj.title), React.createElement(\"div\", {\n    className: \"audio-time\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, normalizeAudioCurentTime(currentTime), ' / ', normalizeAudioCurentTime(duration))));\n};\n\nPlayPanelAudioInfo.propTypes = {\n  duration: PropTypes.number,\n  currentTrackMoment: PropTypes.string,\n  isPlaying: PropTypes.bool,\n  currentAudioObj: PropTypes.object,\n  isLoading: PropTypes.bool\n};\nexport default PlayPanelAudioInfo;","map":{"version":3,"sources":["/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelAudioInfo.js"],"names":["React","Fragment","PropTypes","styled","PlayAnimation","loader","normalizeAudioCurentTime","AudioWrap","div","AudioImage","AudioName","h2","AudioInfo","PlayPanelAudioInfo","duration","currentTime","isPlaying","currentAudioObj","isLoading","title","image","propTypes","number","currentTrackMoment","string","bool","object"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,aAAP,MAA0B,0EAA1B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,SAAQC,wBAAR,QAAuC,uBAAvC;AAGA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,GAAV,mBAAf;AAMA,MAAMC,UAAU,GAAGN,MAAM,CAACK,GAAV,oBAAhB;AAgBA,MAAME,SAAS,GAAGP,MAAM,CAACQ,EAAV,oBAAf;AASA,MAAMC,SAAS,GAAGT,MAAM,CAACK,GAAV,oBAAf;;AAKA,MAAMK,kBAAkB,GAAG,CAAC;AACxBC,EAAAA,QADwB;AAExBC,EAAAA,WAFwB;AAGxBC,EAAAA,SAHwB;AAIxBC,EAAAA,eAJwB;AAKxBC,EAAAA;AALwB,CAAD,KAMrB;AAGF,MAAIA,SAAJ,EAAe;AACX,WACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,GAAG,EAAEb,MAAV;AAAkB,MAAA,GAAG,EAAEY,eAAe,CAACE,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,CADJ,CADJ;AAQH;;AAED,SACI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEF,eAAe,CAACE,KAD3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAEF,eAAe,CAACG,KAA1B;AAAiC,IAAA,GAAG,EAAEH,eAAe,CAACE,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKH,SAAS,IAAI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFlB,CADJ,CAHJ,EASI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYC,eAAe,CAACE,KAA5B,CADJ,EAEI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKb,wBAAwB,CAACS,WAAD,CAD7B,EAEK,KAFL,EAGKT,wBAAwB,CAACQ,QAAD,CAH7B,CAFJ,CATJ,CADJ;AAoBH,CAxCD;;AA0CAD,kBAAkB,CAACQ,SAAnB,GAA+B;AAC3BP,EAAAA,QAAQ,EAAEZ,SAAS,CAACoB,MADO;AAE3BC,EAAAA,kBAAkB,EAAErB,SAAS,CAACsB,MAFH;AAG3BR,EAAAA,SAAS,EAAEd,SAAS,CAACuB,IAHM;AAI3BR,EAAAA,eAAe,EAAEf,SAAS,CAACwB,MAJA;AAK3BR,EAAAA,SAAS,EAAEhB,SAAS,CAACuB;AALM,CAA/B;AAQA,eAAeZ,kBAAf","sourcesContent":["import React, {Fragment} from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport PlayAnimation from '../../components/AudioVizyalizations/SmallCssVizyalization/PlayAnimation';\nimport loader from '../../assets/images/loader.gif';\nimport {normalizeAudioCurentTime} from \"../../helpers/helpers\";\n\n\nconst AudioWrap = styled.div`\n  display: flex;\n  align-items: center;\n  width: 400px;\n`;\n\nconst AudioImage = styled.div`\n  width: 60px;\n  min-width: 60px;\n  height: 60px;\n  margin-right: 10px;\n  border-radius: 5px;\n  overflow: hidden;\n  position: relative;\n  img {\n    max-width: 100%;\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n  }\n`;\n\nconst AudioName = styled.h2`\n  margin: 0;\n  font-size: 18px;\n  color: #777777;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n`;\n\nconst AudioInfo = styled.div`\n  max-width: 100%;\n`;\n\n\nconst PlayPanelAudioInfo = ({\n    duration,\n    currentTime,\n    isPlaying,\n    currentAudioObj,\n    isLoading,\n}) => {\n\n\n    if (isLoading) {\n        return (\n            <AudioWrap>\n                <AudioImage>\n                    <img src={loader} alt={currentAudioObj.title}/>\n                    <span>Loading ...</span>\n                </AudioImage>\n            </AudioWrap>\n        )\n    }\n\n    return (\n        <AudioWrap\n            title={currentAudioObj.title}\n        >\n            <AudioImage>\n                <Fragment>\n                    <img src={currentAudioObj.image} alt={currentAudioObj.title}/>\n                    {isPlaying && <PlayAnimation/>}\n                </Fragment>\n            </AudioImage>\n            <AudioInfo>\n                <AudioName>{currentAudioObj.title}</AudioName>\n                <div className=\"audio-time\">\n                    {normalizeAudioCurentTime(currentTime)}\n                    {' / '}\n                    {normalizeAudioCurentTime(duration)}\n                </div>\n            </AudioInfo>\n        </AudioWrap>\n    );\n};\n\nPlayPanelAudioInfo.propTypes = {\n    duration: PropTypes.number,\n    currentTrackMoment: PropTypes.string,\n    isPlaying: PropTypes.bool,\n    currentAudioObj: PropTypes.object,\n    isLoading: PropTypes.bool,\n};\n\nexport default PlayPanelAudioInfo;"]},"metadata":{},"sourceType":"module"}