{"ast":null,"code":"var _jsxFileName = \"/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { playNextAudio } from '../../modules/audio/audioAction';\nimport PlayPanel from './PlayPanel';\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlay = () => {\n      const audio = this.state.audio;\n\n      if (audio.paused || audio.ended) {\n        audio.play();\n        this.setState({\n          isPlaying: true\n        });\n      } else {\n        audio.pause();\n        this.setState({\n          isPlaying: false\n        });\n      }\n    };\n\n    this.handlePlayNext = () => {\n      const currentAudio = this.state.currentAudio;\n      this.setState({\n        isLoading: true,\n        currentAudio: currentAudio + 1\n      }, () => {\n        const _this$state = this.state,\n              audio = _this$state.audio,\n              currentAudio = _this$state.currentAudio;\n        audio.src = this.props.audioList[currentAudio].url;\n\n        audio.onloadedmetadata = () => {\n          console.log(audio.duration);\n          this.setState({\n            isLoading: false,\n            isPlaying: true,\n            duration: audio.duration\n          });\n        };\n\n        audio.ontimeupdate = () => {\n          this.setState({\n            currentTime: audio.currentTime\n          });\n        };\n\n        audio.play();\n      });\n    };\n\n    this.changeVolume = value => {\n      const audio = this.state.audio;\n      this.setState({\n        volume: value\n      });\n      audio.volume = value / 100;\n    };\n\n    this.handleAudioLoop = () => {\n      const audio = this.state.audio;\n      audio.loop = true;\n      this.setState({\n        loop: !this.state.loop\n      });\n    };\n\n    this.state = {\n      audio: null,\n      currentAudio: 0,\n      duration: 0,\n      currentTime: 0,\n      isPlaying: false,\n      isLoading: true,\n      volume: defaultVolume,\n      loop: false\n    };\n  }\n\n  componentDidMount() {\n    const currentAudio = this.state.currentAudio;\n    this.setState({\n      audio: new Audio(this.props.audioList[currentAudio].url)\n    }, () => {\n      const audio = this.state.audio;\n\n      audio.onloadedmetadata = () => {\n        this.setState({\n          isLoading: false,\n          duration: audio.duration\n        });\n      };\n\n      audio.ontimeupdate = () => {\n        this.setState({\n          currentTime: audio.currentTime\n        });\n      };\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          audio = _this$state2.audio,\n          isPlaying = _this$state2.isPlaying,\n          volume = _this$state2.volume,\n          isLoading = _this$state2.isLoading,\n          duration = _this$state2.duration,\n          currentTime = _this$state2.currentTime,\n          currentAudio = _this$state2.currentAudio,\n          loop = _this$state2.loop;\n    console.log(this.state);\n    return React.createElement(PlayPanel, {\n      isLoading: isLoading,\n      currentAudioObj: this.props.audioList[currentAudio],\n      audio: audio,\n      isPlaying: isPlaying,\n      handlePlay: this.handlePlay,\n      handlePlayNext: this.handlePlayNext,\n      volume: volume,\n      changeVolume: this.changeVolume,\n      duration: duration,\n      currentTime: currentTime,\n      loop: loop,\n      handleAudioLoop: this.handleAudioLoop // defaultValue={defaultValue}\n      // audioPlayer={audioPlayer}\n      // handleMetadata={handleMetadata}\n      // handleTimeupdate={handleTimeupdate}\n      // setAudioDuration={setAudioDuration}\n      // currentTrackMoment={currentTrackMoment}\n      // currentTrackDuration={currentTrackDuration}\n      // currentAudio={currentAudio}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    });\n  }\n\n}\n\nPlayPanelContainer.propTypes = {\n  audioList: PropTypes.array,\n  playNextAudio: PropTypes.func\n};\nexport default connect(state => ({\n  audioList: state.audio.audioList\n}), {\n  playNextAudio\n})(PlayPanelContainer); // const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [loop, setLoop] = useState(false);\n//\n//\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };","map":{"version":3,"sources":["/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js"],"names":["React","Component","PropTypes","connect","playNextAudio","PlayPanel","defaultVolume","PlayPanelContainer","constructor","props","handlePlay","audio","state","paused","ended","play","setState","isPlaying","pause","handlePlayNext","currentAudio","isLoading","src","audioList","url","onloadedmetadata","console","log","duration","ontimeupdate","currentTime","changeVolume","value","volume","handleAudioLoop","loop","componentDidMount","Audio","render","propTypes","array","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\nimport {playNextAudio} from '../../modules/audio/audioAction';\n\n\n\nimport PlayPanel from './PlayPanel';\n\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audio: null,\n            currentAudio: 0,\n            duration: 0,\n            currentTime: 0,\n            isPlaying: false,\n            isLoading: true,\n            volume: defaultVolume,\n            loop: false\n        };\n    }\n\n\n    handlePlay = () => {\n        const {audio} = this.state;\n\n        if (audio.paused || audio.ended) {\n            audio.play();\n            this.setState({ isPlaying: true });\n        } else {\n            audio.pause();\n            this.setState({ isPlaying: false });\n        }\n    };\n\n\n    // getMetadata = () => {\n    //     const {audio} = this.state;\n    //     const duration = Math.floor(audio.duration);\n    //     console.log(duration);\n    // };\n\n\n    handlePlayNext = () => {\n        const {currentAudio} = this.state;\n        this.setState({\n            isLoading: true,\n            currentAudio: currentAudio + 1\n        }, () => {\n\n            const {audio, currentAudio} = this.state;\n            audio.src = this.props.audioList[currentAudio].url;\n\n            audio.onloadedmetadata = () => {\n                console.log(audio.duration);\n                this.setState({\n                    isLoading: false,\n                    isPlaying: true,\n                    duration: audio.duration\n                })\n            };\n            audio.ontimeupdate = () => {\n                this.setState({\n                    currentTime: audio.currentTime\n                })\n            };\n            audio.play();\n        });\n\n    };\n\n\n    changeVolume = value => {\n        const {audio} = this.state;\n\n        this.setState({volume: value});\n        audio.volume = value / 100;\n    };\n\n    handleAudioLoop = () => {\n        const {audio} = this.state;\n        audio.loop = true;\n        this.setState({\n            loop: !this.state.loop\n        });\n    };\n\n    componentDidMount() {\n        const {currentAudio} = this.state;\n\n        this.setState({\n            audio: new Audio(this.props.audioList[currentAudio].url),\n        }, () => {\n\n            const {audio} = this.state;\n            audio.onloadedmetadata = () => {\n                this.setState({\n                    isLoading: false,\n                    duration: audio.duration\n                })\n            };\n            audio.ontimeupdate = () => {\n                this.setState({\n                    currentTime: audio.currentTime\n                })\n            }\n        });\n    }\n\n\n    render() {\n        const {audio, isPlaying, volume, isLoading, duration, currentTime, currentAudio, loop} = this.state;\n        \n        console.log(this.state);\n\n        return (\n            <PlayPanel\n                isLoading={isLoading}\n                currentAudioObj={this.props.audioList[currentAudio]}\n                audio={audio}\n                isPlaying={isPlaying}\n                handlePlay={this.handlePlay}\n                handlePlayNext={this.handlePlayNext}\n                volume={volume}\n                changeVolume={this.changeVolume}\n                duration={duration}\n                currentTime={currentTime}\n                loop={loop}\n                handleAudioLoop={this.handleAudioLoop}\n\n                // defaultValue={defaultValue}\n                // audioPlayer={audioPlayer}\n                // handleMetadata={handleMetadata}\n                // handleTimeupdate={handleTimeupdate}\n                // setAudioDuration={setAudioDuration}\n                // currentTrackMoment={currentTrackMoment}\n                // currentTrackDuration={currentTrackDuration}\n                // currentAudio={currentAudio}\n            />\n        );\n    }\n}\n\nPlayPanelContainer.propTypes = {\n    audioList: PropTypes.array,\n    playNextAudio: PropTypes.func,\n};\n\nexport default connect(state => ({\n    audioList: state.audio.audioList,\n}), {playNextAudio})(PlayPanelContainer);\n\n\n\n\n\n\n\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [loop, setLoop] = useState(false);\n//\n//\n\n\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };"]},"metadata":{},"sourceType":"module"}