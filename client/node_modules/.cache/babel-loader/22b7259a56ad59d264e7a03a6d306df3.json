{"ast":null,"code":"var _jsxFileName = \"/Grawdanin/MERN/audio/client/src/components/PlayPanel/PlayPanelContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { togglePlayPanel } from '../../modules/app/appActions';\nimport { playNextAudio } from '../../modules/audio/audioAction';\nimport PlayPanel from './PlayPanel';\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlay = () => {\n      const audio = this.state.audio;\n\n      if (audio.paused || audio.ended) {\n        audio.play();\n        this.setState({\n          isPlaying: true\n        });\n      } else {\n        audio.pause();\n        this.setState({\n          isPlaying: false\n        });\n      }\n    };\n\n    this.handlePlayNext = () => {\n      const currentAudio = this.state.currentAudio;\n      this.setState({\n        isLoading: true,\n        currentAudio: currentAudio + 1\n      }, () => {\n        const _this$state = this.state,\n              audio = _this$state.audio,\n              currentAudio = _this$state.currentAudio;\n        audio.src = this.props.audioList[currentAudio].url;\n\n        audio.onloadedmetadata = () => {\n          console.log(audio.duration);\n          this.setState({\n            isLoading: false,\n            isPlaying: true,\n            duration: audio.duration\n          });\n        };\n\n        audio.ontimeupdate = () => {\n          this.setState({\n            currentTime: audio.currentTime\n          });\n        };\n\n        audio.play();\n      });\n    };\n\n    this.handlePlayPrev = () => {\n      const currentAudio = this.state.currentAudio;\n      this.setState({\n        isLoading: true,\n        currentAudio: currentAudio - 1\n      }, () => {\n        const _this$state2 = this.state,\n              audio = _this$state2.audio,\n              currentAudio = _this$state2.currentAudio;\n        audio.src = this.props.audioList[currentAudio].url;\n\n        audio.onloadedmetadata = () => {\n          console.log(audio.duration);\n          this.setState({\n            isLoading: false,\n            isPlaying: true,\n            duration: audio.duration\n          });\n        };\n\n        audio.ontimeupdate = () => {\n          this.setState({\n            currentTime: audio.currentTime\n          });\n\n          if (audio.currentTime === audio.duration) {\n            audio.pause();\n            this.setState({\n              isPlaying: false\n            });\n          }\n        };\n\n        audio.play();\n      });\n    };\n\n    this.changeAudio = audioId => {\n      const audioList = this.props.audioList;\n      const newAudio = audioList.filter(audio => audio.id === audioId);\n      this.setState({\n        isLoading: true,\n        audio: new Audio(newAudio[0].url)\n      }, () => {\n        const audio = this.state.audio;\n\n        audio.onloadedmetadata = () => {\n          this.setState({\n            isLoading: false,\n            duration: audio.duration\n          });\n        };\n\n        audio.ontimeupdate = () => {\n          this.setState({\n            currentTime: audio.currentTime\n          });\n\n          if (audio.currentTime === audio.duration) {\n            audio.pause();\n            this.setState({\n              isPlaying: false\n            });\n          }\n        };\n\n        audio.play();\n      });\n    };\n\n    this.playAudio = () => {\n      const audio = this.state.audio;\n      audio.play();\n      this.setState({\n        isPlaying: true\n      });\n    };\n\n    this.changeVolume = value => {\n      const audio = this.state.audio;\n      this.setState({\n        volume: value\n      });\n      audio.volume = value / 100;\n    };\n\n    this.handleAudioLoop = () => {\n      const _this$state3 = this.state,\n            audio = _this$state3.audio,\n            loop = _this$state3.loop;\n\n      if (loop) {\n        audio.loop = false;\n        this.setState({\n          loop: false\n        });\n      } else {\n        audio.loop = true;\n        this.setState({\n          loop: true\n        });\n      }\n    };\n\n    this.setAudioDuration = currentTime => {\n      const audio = this.state.audio;\n      this.setState({\n        currentTime\n      });\n      audio.currentTime = currentTime;\n    };\n\n    this.state = {\n      audio: null,\n      audioId: this.props.audioId,\n      duration: 0,\n      currentTime: 0,\n      isPlaying: false,\n      isLoading: true,\n      volume: defaultVolume,\n      loop: false\n    };\n  }\n\n  componentDidUpdate(prevProps, state) {\n    // console.log(this.props, 'new');\n    // console.log({prevProps});\n    // console.log({state});\n    // if (this.props.audioId === prevProps.audioId) {\n    //     //play first audio\n    //     alert('first');\n    // }\n    if (this.props.audioId !== prevProps.audioId) {\n      this.changeAudio(this.props.audioId);\n    }\n  }\n\n  componentDidMount() {\n    const currentAudio = this.state.currentAudio;\n    this.setState({\n      audio: new Audio(this.props.audioList[this.props.audioId].url)\n    }, () => {\n      const audio = this.state.audio;\n\n      audio.onloadedmetadata = () => {\n        this.setState({\n          isLoading: false,\n          duration: audio.duration\n        });\n      };\n\n      audio.ontimeupdate = () => {\n        this.setState({\n          currentTime: audio.currentTime\n        });\n\n        if (audio.currentTime === audio.duration) {\n          audio.pause();\n          this.setState({\n            isPlaying: false\n          });\n        }\n      };\n    });\n  }\n\n  render() {\n    const _this$state4 = this.state,\n          audio = _this$state4.audio,\n          isPlaying = _this$state4.isPlaying,\n          volume = _this$state4.volume,\n          isLoading = _this$state4.isLoading,\n          duration = _this$state4.duration,\n          currentTime = _this$state4.currentTime,\n          loop = _this$state4.loop;\n    const _this$props = this.props,\n          togglePlayPanel = _this$props.togglePlayPanel,\n          showPlayPanel = _this$props.showPlayPanel,\n          audioId = _this$props.audioId;\n    return React.createElement(PlayPanel, {\n      isLoading: isLoading,\n      currentAudioObj: this.props.audioList[audioId],\n      audio: audio,\n      isPlaying: isPlaying,\n      handlePlay: this.handlePlay,\n      handlePlayNext: this.handlePlayNext,\n      handlePlayPrev: this.handlePlayPrev,\n      defaultVolume: defaultVolume,\n      volume: volume,\n      changeVolume: this.changeVolume,\n      duration: duration,\n      currentTime: currentTime,\n      loop: loop,\n      handleAudioLoop: this.handleAudioLoop,\n      setAudioDuration: this.setAudioDuration,\n      togglePlayPanel: togglePlayPanel,\n      showPlayPanel: showPlayPanel // audioPlayer={audioPlayer}\n      // handleMetadata={handleMetadata}\n      // handleTimeupdate={handleTimeupdate}\n      // currentTrackMoment={currentTrackMoment}\n      // currentTrackDuration={currentTrackDuration}\n      // currentAudio={currentAudio}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    });\n  }\n\n}\n\nPlayPanelContainer.propTypes = {\n  audioList: PropTypes.array,\n  playNextAudio: PropTypes.func\n};\nexport default connect(state => ({\n  audioList: state.audio.audioList,\n  audioId: state.audio.audioId,\n  showPlayPanel: state.app.showPlayPanel\n}), {\n  playNextAudio,\n  togglePlayPanel\n})(PlayPanelContainer);","map":{"version":3,"sources":["/Grawdanin/MERN/audio/client/src/components/PlayPanel/PlayPanelContainer.js"],"names":["React","Component","PropTypes","connect","togglePlayPanel","playNextAudio","PlayPanel","defaultVolume","PlayPanelContainer","constructor","props","handlePlay","audio","state","paused","ended","play","setState","isPlaying","pause","handlePlayNext","currentAudio","isLoading","src","audioList","url","onloadedmetadata","console","log","duration","ontimeupdate","currentTime","handlePlayPrev","changeAudio","audioId","newAudio","filter","id","Audio","playAudio","changeVolume","value","volume","handleAudioLoop","loop","setAudioDuration","componentDidUpdate","prevProps","componentDidMount","render","showPlayPanel","propTypes","array","func","app"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\nimport {togglePlayPanel} from '../../modules/app/appActions';\nimport {playNextAudio} from '../../modules/audio/audioAction';\n\nimport PlayPanel from './PlayPanel';\n\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audio: null,\n            audioId: this.props.audioId,\n            duration: 0,\n            currentTime: 0,\n            isPlaying: false,\n            isLoading: true,\n            volume: defaultVolume,\n            loop: false\n        };\n    }\n\n\n    handlePlay = () => {\n        const {audio} = this.state;\n\n        if (audio.paused || audio.ended) {\n            audio.play();\n            this.setState({isPlaying: true});\n        } else {\n            audio.pause();\n            this.setState({isPlaying: false});\n        }\n    };\n\n\n    // getMetadata = () => {\n    //     const {audio} = this.state;\n    //     const duration = Math.floor(audio.duration);\n    //     console.log(duration);\n    // };\n\n\n    handlePlayNext = () => {\n        const {currentAudio} = this.state;\n        this.setState({\n            isLoading: true,\n            currentAudio: currentAudio + 1\n        }, () => {\n\n            const {audio, currentAudio} = this.state;\n            audio.src = this.props.audioList[currentAudio].url;\n\n            audio.onloadedmetadata = () => {\n                console.log(audio.duration);\n                this.setState({\n                    isLoading: false,\n                    isPlaying: true,\n                    duration: audio.duration\n                })\n            };\n            audio.ontimeupdate = () => {\n                this.setState({\n                    currentTime: audio.currentTime\n                })\n            };\n            audio.play();\n        });\n\n    };\n\n\n    handlePlayPrev = () => {\n        const {currentAudio} = this.state;\n        this.setState({\n            isLoading: true,\n            currentAudio: currentAudio - 1\n        }, () => {\n\n            const {audio, currentAudio} = this.state;\n            audio.src = this.props.audioList[currentAudio].url;\n\n            audio.onloadedmetadata = () => {\n                console.log(audio.duration);\n                this.setState({\n                    isLoading: false,\n                    isPlaying: true,\n                    duration: audio.duration\n                })\n            };\n            audio.ontimeupdate = () => {\n                this.setState({\n                    currentTime: audio.currentTime\n                });\n                if (audio.currentTime === audio.duration) {\n                    audio.pause();\n                    this.setState({isPlaying: false});\n                }\n            };\n            audio.play();\n        });\n\n    };\n\n\n    componentDidUpdate(prevProps, state) {\n\n        // console.log(this.props, 'new');\n        // console.log({prevProps});\n        // console.log({state});\n\n\n        // if (this.props.audioId === prevProps.audioId) {\n        //     //play first audio\n        //     alert('first');\n        // }\n\n\n        if (this.props.audioId !== prevProps.audioId) {\n            this.changeAudio(this.props.audioId);\n        }\n    }\n\n\n\n    changeAudio = (audioId) => {\n\n        const {audioList} = this.props;\n        const newAudio = audioList.filter(audio => audio.id === audioId);\n\n        this.setState({\n            isLoading: true,\n            audio: new Audio(newAudio[0].url),\n        }, () => {\n\n            const {audio} = this.state;\n            audio.onloadedmetadata = () => {\n                this.setState({\n                    isLoading: false,\n                    duration: audio.duration\n                })\n            };\n            audio.ontimeupdate = () => {\n                this.setState({\n                    currentTime: audio.currentTime\n                });\n                if (audio.currentTime === audio.duration) {\n                    audio.pause();\n                    this.setState({isPlaying: false});\n                }\n            };\n\n            audio.play();\n\n        });\n\n    };\n\n\n    playAudio = () => {\n        const {audio} = this.state;\n\n        audio.play();\n        this.setState({\n            isPlaying: true\n        })\n\n\n    }\n\n\n    changeVolume = value => {\n        const {audio} = this.state;\n\n        this.setState({volume: value});\n        audio.volume = value / 100;\n    };\n\n    handleAudioLoop = () => {\n        const {audio, loop} = this.state;\n\n        if (loop) {\n            audio.loop = false;\n            this.setState({loop: false});\n        } else {\n            audio.loop = true;\n            this.setState({loop: true});\n        }\n    };\n\n\n    setAudioDuration = currentTime => {\n        const {audio} = this.state;\n        this.setState({currentTime});\n        audio.currentTime = currentTime;\n    };\n\n    componentDidMount() {\n        const {currentAudio} = this.state;\n\n        this.setState({\n            audio: new Audio(this.props.audioList[this.props.audioId].url),\n        }, () => {\n\n            const {audio} = this.state;\n            audio.onloadedmetadata = () => {\n                this.setState({\n                    isLoading: false,\n                    duration: audio.duration\n                })\n            };\n            audio.ontimeupdate = () => {\n                this.setState({\n                    currentTime: audio.currentTime\n                });\n                if (audio.currentTime === audio.duration) {\n                    audio.pause();\n                    this.setState({isPlaying: false});\n                }\n            }\n        });\n    }\n\n\n    render() {\n        const {audio, isPlaying, volume, isLoading, duration, currentTime, loop} = this.state;\n        const {togglePlayPanel, showPlayPanel, audioId} = this.props;\n\n        return (\n            <PlayPanel\n                isLoading={isLoading}\n                currentAudioObj={this.props.audioList[audioId]}\n                audio={audio}\n                isPlaying={isPlaying}\n                handlePlay={this.handlePlay}\n                handlePlayNext={this.handlePlayNext}\n                handlePlayPrev={this.handlePlayPrev}\n                defaultVolume={defaultVolume}\n                volume={volume}\n                changeVolume={this.changeVolume}\n                duration={duration}\n                currentTime={currentTime}\n                loop={loop}\n                handleAudioLoop={this.handleAudioLoop}\n                setAudioDuration={this.setAudioDuration}\n\n                togglePlayPanel={togglePlayPanel}\n                showPlayPanel={showPlayPanel}\n\n                // audioPlayer={audioPlayer}\n                // handleMetadata={handleMetadata}\n                // handleTimeupdate={handleTimeupdate}\n\n                // currentTrackMoment={currentTrackMoment}\n                // currentTrackDuration={currentTrackDuration}\n                // currentAudio={currentAudio}\n            />\n        );\n    }\n}\n\nPlayPanelContainer.propTypes = {\n    audioList: PropTypes.array,\n    playNextAudio: PropTypes.func,\n};\n\nexport default connect(state => ({\n    audioList: state.audio.audioList,\n    audioId: state.audio.audioId,\n    showPlayPanel: state.app.showPlayPanel\n}), {playNextAudio, togglePlayPanel})(PlayPanelContainer);"]},"metadata":{},"sourceType":"module"}