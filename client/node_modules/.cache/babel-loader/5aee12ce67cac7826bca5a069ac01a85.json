{"ast":null,"code":"var _jsxFileName = \"/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { playNextAudio } from '../../modules/audio/audioAction';\nimport { normalizeAudioCurentTime } from \"../../helpers/helpers\";\nimport PlayPanel from './PlayPanel';\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlay = () => {\n      const audio = this.state.audio;\n\n      if (audio.paused || audio.ended) {\n        audio.play();\n        this.setState({\n          isPlaying: true\n        });\n      } else {\n        audio.pause();\n        this.setState({\n          isPlaying: false\n        });\n      }\n    };\n\n    this.getMetadata = () => {\n      const audio = this.state.audio;\n      const duration = Math.floor(audio.duration);\n      console.log(duration); // setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n    };\n\n    this.handlePlayNext = () => {\n      this.setState({\n        loading: false\n      });\n      const audio = this.state.audio;\n      this.props.playNextAudio();\n      audio.src = this.props.audioList[this.props.currentAudio].url;\n      audio.play();\n      this.setState({\n        isPlaying: true\n      });\n    };\n\n    this.changeVolume = value => {\n      const audio = this.state.audio;\n      this.setState({\n        volume: value\n      });\n      audio.volume = value / 100;\n    };\n\n    this.setCurrentAudioPlay = () => {};\n\n    this.state = {\n      audio: new Audio(props.audioList[props.currentAudio].url),\n      isPlaying: false,\n      isLoading: true,\n      volume: defaultVolume\n    };\n  }\n\n  // componentWillReceiveProps(nextProps, nextContext) {\n  //     this.setNewCurrentAudio(nextProps.currentAudio);\n  // }\n  componentDidMount() {\n    debugger;\n\n    this.state.audio.onloadedmetadata = () => {\n      this.setState({\n        isLoading: false\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          audio = _this$state.audio,\n          isPlaying = _this$state.isPlaying,\n          volume = _this$state.volume,\n          loading = _this$state.loading;\n    return React.createElement(PlayPanel, {\n      loading: loading,\n      currentAudioObj: this.props.audioList[this.props.currentAudio],\n      audio: audio,\n      isPlaying: isPlaying,\n      handlePlay: this.handlePlay,\n      handlePlayNext: this.handlePlayNext,\n      volume: volume,\n      changeVolume: this.changeVolume // loop={loop}\n      // audioPlayer={audioPlayer}\n      // handleMetadata={handleMetadata}\n      // handleTimeupdate={handleTimeupdate}\n      // defaultValue={defaultValue}\n      // handleAudioLoop={handleAudioLoop}\n      // setAudioDuration={setAudioDuration}\n      // currentTrackMoment={currentTrackMoment}\n      // currentTrackDuration={currentTrackDuration}\n      // currentAudio={currentAudio}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }\n\n}\n\nPlayPanelContainer.propTypes = {\n  audioList: PropTypes.array,\n  currentAudio: PropTypes.number,\n  playNextAudio: PropTypes.func\n};\nexport default connect(state => ({\n  audioList: state.audio.audioList,\n  currentAudio: state.audio.currentAudio\n}), {\n  playNextAudio\n})(PlayPanelContainer); // import React, {useEffect, useState} from 'react';\n// import PropTypes from 'prop-types';\n// import PlayPanel from './PlayPanel';\n//\n// import {connect} from 'react-redux';\n//\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [audioPlayer, setAudioPlayer] = useState(null);\n//\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [loop, setLoop] = useState(false);\n//     const [volume, setVolume] = useState(defaultValue);\n//     const [progressBarWidth, setProgressBarWidth] = useState('0');\n//     const [currentTrackDuration, setCurrentTrackDuration] = useState(0);\n//     const [currentTrackMoment, setCurrentTrackMoment] = useState(0);\n//\n//\n//     const handleAudioLoop = () => {\n//         setLoop(!loop);\n//     };\n//\n//     const handleMetadata = () => {\n//         const audio = audioPlayer.current;\n//\n//         const duration = Math.floor(audio.duration);\n//         setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n//     };\n//\n//\n//     const setAudioDuration = diration => {\n//         audioPlayer.current.currentTime = diration;\n//     };\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };\n//\n// PlayPanelContainer.propTypes = {\n//\n// };\n//\n// export default connect(state => ({\n//     audioList: state.audio.audioList,\n//     currentAudio: state.audio.currentAudio\n// }))(PlayPanelContainer);","map":{"version":3,"sources":["/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js"],"names":["React","Component","PropTypes","connect","playNextAudio","normalizeAudioCurentTime","PlayPanel","defaultVolume","PlayPanelContainer","constructor","props","handlePlay","audio","state","paused","ended","play","setState","isPlaying","pause","getMetadata","duration","Math","floor","console","log","handlePlayNext","loading","src","audioList","currentAudio","url","changeVolume","value","volume","setCurrentAudioPlay","Audio","isLoading","componentDidMount","onloadedmetadata","render","propTypes","array","number","func"],"mappings":"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G3CxB,kBAAkB,CAACiC,SAAnB,GAA+B;AAC3BZ,EAAAA,SAAS,EAAE3B,SAAS,CAACwC,KADM;AAE3BZ,EAAAA,YAAY,EAAE5B,SAAS,CAACyC,MAFG;AAG3BvC,EAAAA,aAAa,EAAEF,SAAS,CAAC0C;AAHE,CAA/B;AAMA,eAAezC,OAAO,CAACU,KAAK,KAAK;AAC7BgB,EAAAA,SAAS,EAAEhB,KAAK,CAACD,KAAN,CAAYiB,SADM;AAE7BC,EAAAA,YAAY,EAAEjB,KAAK,CAACD,KAAN,CAAYkB;AAFG,CAAL,CAAN,EAGlB;AAAC1B,EAAAA;AAAD,CAHkB,CAAP,CAGMI,kBAHN,CAAf,C,CAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\nimport {playNextAudio} from '../../modules/audio/audioAction';\n\nimport {normalizeAudioCurentTime} from \"../../helpers/helpers\";\n\nimport PlayPanel from './PlayPanel';\n\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audio: new Audio(props.audioList[props.currentAudio].url),\n            isPlaying: false,\n            isLoading: true,\n            volume: defaultVolume\n        };\n    }\n\n\n    handlePlay = () => {\n        const {audio} = this.state;\n\n        if (audio.paused || audio.ended) {\n            audio.play();\n            this.setState({ isPlaying: true });\n        } else {\n            audio.pause();\n            this.setState({ isPlaying: false });\n        }\n    };\n\n\n    getMetadata = () => {\n        const {audio} = this.state;\n        const duration = Math.floor(audio.duration);\n        console.log(duration);\n        // setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n    };\n\n\n    handlePlayNext = () => {\n\n        this.setState({loading: false});\n        const {audio} = this.state;\n\n        this.props.playNextAudio();\n\n        audio.src = this.props.audioList[this.props.currentAudio].url;\n        audio.play();\n        this.setState({\n            isPlaying: true\n        });\n    };\n\n\n    changeVolume = value => {\n        const {audio} = this.state;\n\n        this.setState({volume: value});\n        audio.volume = value / 100;\n    };\n\n\n    // componentWillReceiveProps(nextProps, nextContext) {\n    //     this.setNewCurrentAudio(nextProps.currentAudio);\n    // }\n\n\n    componentDidMount() {\n        debugger\n        this.state.audio.onloadedmetadata = () => {\n            this.setState({\n                isLoading: false\n            })\n        }\n    }\n\n\n    setCurrentAudioPlay = () => {\n\n    };\n\n\n    render() {\n\n        const {audio, isPlaying, volume, loading} = this.state;\n\n        return (\n            <PlayPanel\n                loading={loading}\n                currentAudioObj={this.props.audioList[this.props.currentAudio]}\n                audio={audio}\n                isPlaying={isPlaying}\n                handlePlay={this.handlePlay}\n                handlePlayNext={this.handlePlayNext}\n                volume={volume}\n                changeVolume={this.changeVolume}\n                // loop={loop}\n                // audioPlayer={audioPlayer}\n                // handleMetadata={handleMetadata}\n                // handleTimeupdate={handleTimeupdate}\n\n                // defaultValue={defaultValue}\n\n                // handleAudioLoop={handleAudioLoop}\n                // setAudioDuration={setAudioDuration}\n                // currentTrackMoment={currentTrackMoment}\n                // currentTrackDuration={currentTrackDuration}\n                // currentAudio={currentAudio}\n            />\n        );\n    }\n}\n\nPlayPanelContainer.propTypes = {\n    audioList: PropTypes.array,\n    currentAudio: PropTypes.number,\n    playNextAudio: PropTypes.func,\n};\n\nexport default connect(state => ({\n    audioList: state.audio.audioList,\n    currentAudio: state.audio.currentAudio\n}), {playNextAudio})(PlayPanelContainer);\n\n\n\n\n\n\n// import React, {useEffect, useState} from 'react';\n// import PropTypes from 'prop-types';\n// import PlayPanel from './PlayPanel';\n//\n// import {connect} from 'react-redux';\n\n//\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [audioPlayer, setAudioPlayer] = useState(null);\n//\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [loop, setLoop] = useState(false);\n//     const [volume, setVolume] = useState(defaultValue);\n//     const [progressBarWidth, setProgressBarWidth] = useState('0');\n//     const [currentTrackDuration, setCurrentTrackDuration] = useState(0);\n//     const [currentTrackMoment, setCurrentTrackMoment] = useState(0);\n//\n//\n//     const handleAudioLoop = () => {\n//         setLoop(!loop);\n//     };\n//\n//     const handleMetadata = () => {\n//         const audio = audioPlayer.current;\n//\n//         const duration = Math.floor(audio.duration);\n//         setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n//     };\n//\n//\n//     const setAudioDuration = diration => {\n//         audioPlayer.current.currentTime = diration;\n//     };\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };\n//\n// PlayPanelContainer.propTypes = {\n//\n// };\n//\n// export default connect(state => ({\n//     audioList: state.audio.audioList,\n//     currentAudio: state.audio.currentAudio\n// }))(PlayPanelContainer);"]},"metadata":{},"sourceType":"module"}