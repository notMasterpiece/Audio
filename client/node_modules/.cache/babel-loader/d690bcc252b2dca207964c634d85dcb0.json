{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar swiper_esm_1 = require(\"swiper/dist/js/swiper.esm\");\n\nvar object_assign_1 = __importDefault(require(\"object-assign\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar ReactIdSwiper = function (props) {\n  var swiperRef = react_1.createRef();\n  var swiper = null;\n  var activeSlideKey = props.activeSlideKey,\n      ContainerEl = props.ContainerEl,\n      children = props.children,\n      containerClass = props.containerClass,\n      getSwiper = props.getSwiper,\n      navigation = props.navigation,\n      noSwiping = props.noSwiping,\n      pagination = props.pagination,\n      parallax = props.parallax,\n      parallaxEl = props.parallaxEl,\n      WrapperEl = props.WrapperEl,\n      wrapperClass = props.wrapperClass,\n      rebuildOnUpdate = props.rebuildOnUpdate,\n      renderScrollbar = props.renderScrollbar,\n      renderPagination = props.renderPagination,\n      renderPrevButton = props.renderPrevButton,\n      renderNextButton = props.renderNextButton,\n      renderParallax = props.renderParallax,\n      rtl = props.rtl,\n      scrollbar = props.scrollbar,\n      shouldSwiperUpdate = props.shouldSwiperUpdate,\n      slideClass = props.slideClass,\n      loop = props.loop,\n      _a = props.modules,\n      modules = _a === void 0 ? [] : _a; // Initialize modules to use with swiper;\n\n  swiper_esm_1.Swiper.use(modules); // No render if wrapper elements are not provided or when modules is empty\n\n  if (!children || !ContainerEl || !WrapperEl) {\n    return null;\n  } // Validate children props\n\n\n  if (!utils_1.validateChildren(children)) {\n    console.warn('Children should be react element or an array of react element!!');\n    return null;\n  } // Get current active slide key\n\n\n  var getActiveSlideIndexFromProps = function () {\n    if (!activeSlideKey) {\n      return null;\n    }\n\n    var activeSlideId = 0; // In loop mode first slide index should be 1\n\n    var id = loop ? 1 : 0;\n    react_1.Children.forEach(children, function (child) {\n      if (react_1.isValidElement(child)) {\n        if (child.key === activeSlideKey) {\n          activeSlideId = id;\n        }\n\n        id += 1;\n      }\n    });\n    return activeSlideId;\n  }; // Get swiper instance\n\n\n  var getSwiperInstance = function (swiperInstance) {\n    if (typeof getSwiper === 'function') {\n      getSwiper(swiperInstance);\n    }\n  }; // Initialize swiper\n\n\n  var buildSwiper = function () {\n    if (swiperRef.current && swiper === null) {\n      swiper = new swiper_esm_1.Swiper(swiperRef.current, object_assign_1.default({}, props));\n      getSwiperInstance(swiper);\n    }\n  }; // Destroy swiper\n\n\n  var destroySwiper = function () {\n    if (swiper !== null) {\n      swiper.destroy(true, true);\n      swiper = null;\n      getSwiperInstance(swiper);\n    }\n  }; // Rebuild swiper\n\n\n  var rebuildSwiper = function () {\n    destroySwiper();\n    buildSwiper();\n  }; // Update swiper\n\n\n  var updateSwiper = function () {\n    if (swiper !== null) {\n      swiper.update();\n      getSwiperInstance(swiper);\n    }\n  }; // Render slides\n\n\n  var renderContent = function (e) {\n    if (!utils_1.isReactElement(e)) {\n      return null;\n    }\n\n    var slideClassNames = [slideClass, e.props.className];\n\n    if (noSwiping) {\n      slideClassNames.push('swiper-no-swiping');\n    }\n\n    return react_1.cloneElement(e, __assign({}, e.props, {\n      className: slideClassNames.join(' ').trim()\n    }));\n  }; // Only execute when component is mounted or unmounted\n\n\n  react_1.useEffect(function () {\n    buildSwiper();\n    var slideToIndex = getActiveSlideIndexFromProps();\n\n    if (swiper !== null && slideToIndex !== null) {\n      swiper.slideTo(slideToIndex);\n    }\n\n    return function () {\n      return destroySwiper();\n    };\n  }, []); // Execute each time when props are updated\n\n  react_1.useEffect(function () {\n    if (swiper !== null) {\n      if (rebuildOnUpdate) {\n        rebuildSwiper();\n      } else if (shouldSwiperUpdate) {\n        updateSwiper();\n        var numSlides = swiper.slides.length;\n\n        if (numSlides <= swiper.activeIndex) {\n          var index = Math.max(numSlides - 1, 0);\n          swiper.slideTo(index);\n        }\n      }\n\n      var slideToIndex = getActiveSlideIndexFromProps();\n\n      if (slideToIndex !== null) {\n        swiper.slideTo(slideToIndex);\n      }\n    }\n  }); // Check modules are loaded before rendering contents\n\n  var shouldRenderParallax = utils_1.isModuleAvailable(modules, 'parallax') && parallax && parallaxEl;\n  var shouldRenderPagination = utils_1.isModuleAvailable(modules, 'pagination') && pagination && pagination.el;\n  var shouldRenderScrollbar = utils_1.isModuleAvailable(modules, 'scrollbar') && scrollbar && scrollbar.el;\n  var isNavigationModuleAvailable = utils_1.isModuleAvailable(modules, 'navigation');\n  var shouldRenderNextButton = isNavigationModuleAvailable && navigation && navigation.nextEl;\n  var shouldRenderPrevButton = isNavigationModuleAvailable && navigation && navigation.prevEl;\n  return react_1.default.createElement(ContainerEl, {\n    className: containerClass,\n    dir: rtl && 'rtl',\n    ref: swiperRef\n  }, shouldRenderParallax && renderParallax && renderParallax(props), react_1.default.createElement(WrapperEl, {\n    className: wrapperClass\n  }, react_1.Children.map(children, renderContent)), shouldRenderPagination && renderPagination && renderPagination(props), shouldRenderScrollbar && renderScrollbar && renderScrollbar(props), shouldRenderNextButton && renderNextButton && renderNextButton(props), shouldRenderPrevButton && renderPrevButton && renderPrevButton(props));\n}; // Default props\n\n\nReactIdSwiper.defaultProps = {\n  containerClass: 'swiper-container',\n  wrapperClass: 'swiper-wrapper',\n  slideClass: 'swiper-slide',\n  ContainerEl: 'div',\n  WrapperEl: 'div',\n  renderScrollbar: function (_a) {\n    var scrollbar = _a.scrollbar;\n    return scrollbar ? react_1.default.createElement(\"div\", {\n      className: utils_1.classNames(scrollbar.el)\n    }) : null;\n  },\n  renderPagination: function (_a) {\n    var pagination = _a.pagination;\n    return pagination ? react_1.default.createElement(\"div\", {\n      className: utils_1.classNames(pagination.el)\n    }) : null;\n  },\n  renderPrevButton: function (_a) {\n    var navigation = _a.navigation;\n    return navigation ? react_1.default.createElement(\"div\", {\n      className: utils_1.classNames(navigation.prevEl)\n    }) : null;\n  },\n  renderNextButton: function (_a) {\n    var navigation = _a.navigation;\n    return navigation ? react_1.default.createElement(\"div\", {\n      className: utils_1.classNames(navigation.nextEl)\n    }) : null;\n  },\n  renderParallax: function (_a) {\n    var parallaxEl = _a.parallaxEl;\n    return parallaxEl ? react_1.default.createElement(\"div\", {\n      className: utils_1.classNames(parallaxEl.el),\n      \"data-swiper-parallax\": parallaxEl.value\n    }) : null;\n  },\n  modules: []\n};\nexports.default = ReactIdSwiper;","map":null,"metadata":{},"sourceType":"script"}