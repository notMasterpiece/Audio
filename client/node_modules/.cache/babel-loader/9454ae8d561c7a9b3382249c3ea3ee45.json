{"ast":null,"code":"var _jsxFileName = \"/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { playNextAudio } from '../../modules/audio/audioAction';\nimport PlayPanel from './PlayPanel';\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlay = () => {\n      const audio = this.state.audio;\n\n      if (audio.paused || audio.ended) {\n        audio.play();\n        this.setState({\n          isPlaying: true\n        });\n      } else {\n        audio.pause();\n        this.setState({\n          isPlaying: false\n        });\n      }\n    };\n\n    this.getMetadata = () => {\n      const audio = this.state.audio;\n      const duration = Math.floor(audio.duration);\n      console.log(duration); // setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n    };\n\n    this.handlePlayNext = () => {\n      this.setState({\n        isLoading: true\n      });\n      const audio = this.state.audio;\n      this.props.playNextAudio();\n      audio.src = this.props.audioList[this.props.currentAudio].url;\n\n      audio.onloadedmetadata = () => {\n        console.log(audio.duration);\n        this.setState({\n          isLoading: false,\n          isPlaying: true\n        });\n      };\n\n      audio.ontimeupdate = () => {\n        this.setState({\n          currentTime: audio.currentTime\n        });\n      };\n\n      audio.play();\n    };\n\n    this.changeVolume = value => {\n      const audio = this.state.audio;\n      this.setState({\n        volume: value\n      });\n      audio.volume = value / 100;\n    };\n\n    this.handleAudioLoop = () => {\n      this.setState({\n        loop: !this.state.loop\n      });\n    };\n\n    this.state = {\n      audio: new Audio(props.audioList[props.currentAudio].url),\n      duration: 0,\n      currentTime: 0,\n      isPlaying: false,\n      isLoading: true,\n      volume: defaultVolume,\n      loop: false\n    };\n  }\n\n  // componentWillReceiveProps(nextProps, nextContext) {\n  //     this.setNewCurrentAudio(nextProps.currentAudio);\n  // }\n  componentDidMount() {\n    const audio = this.state.audio;\n\n    audio.onloadedmetadata = () => {\n      this.setState({\n        isLoading: false,\n        duration: audio.duration\n      });\n    };\n\n    audio.ontimeupdate = () => {\n      this.setState({\n        currentTime: audio.currentTime\n      });\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          audio = _this$state.audio,\n          isPlaying = _this$state.isPlaying,\n          volume = _this$state.volume,\n          isLoading = _this$state.isLoading,\n          duration = _this$state.duration,\n          currentTime = _this$state.currentTime,\n          loop = _this$state.loop,\n          handleAudioLoop = _this$state.handleAudioLoop;\n    return React.createElement(PlayPanel, {\n      isLoading: isLoading,\n      currentAudioObj: this.props.audioList[this.props.currentAudio],\n      audio: audio,\n      isPlaying: isPlaying,\n      handlePlay: this.handlePlay,\n      handlePlayNext: this.handlePlayNext,\n      volume: volume,\n      changeVolume: this.changeVolume,\n      duration: duration,\n      currentTime: currentTime,\n      loop: loop,\n      handleAudioLoop: this.handleAudioLoop // defaultValue={defaultValue}\n      // audioPlayer={audioPlayer}\n      // handleMetadata={handleMetadata}\n      // handleTimeupdate={handleTimeupdate}\n      // setAudioDuration={setAudioDuration}\n      // currentTrackMoment={currentTrackMoment}\n      // currentTrackDuration={currentTrackDuration}\n      // currentAudio={currentAudio}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    });\n  }\n\n}\n\nPlayPanelContainer.propTypes = {\n  audioList: PropTypes.array,\n  currentAudio: PropTypes.number,\n  playNextAudio: PropTypes.func\n};\nexport default connect(state => ({\n  audioList: state.audio.audioList,\n  currentAudio: state.audio.currentAudio\n}), {\n  playNextAudio\n})(PlayPanelContainer); // const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [loop, setLoop] = useState(false);\n//\n//\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };","map":{"version":3,"sources":["/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js"],"names":["React","Component","PropTypes","connect","playNextAudio","PlayPanel","defaultVolume","PlayPanelContainer","constructor","props","handlePlay","audio","state","paused","ended","play","setState","isPlaying","pause","getMetadata","duration","Math","floor","console","log","handlePlayNext","isLoading","src","audioList","currentAudio","url","onloadedmetadata","ontimeupdate","currentTime","changeVolume","value","volume","handleAudioLoop","loop","Audio","componentDidMount","render","propTypes","array","number","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\nimport {playNextAudio} from '../../modules/audio/audioAction';\n\n\n\nimport PlayPanel from './PlayPanel';\n\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audio: new Audio(props.audioList[props.currentAudio].url),\n            duration: 0,\n            currentTime: 0,\n            isPlaying: false,\n            isLoading: true,\n            volume: defaultVolume,\n            loop: false\n        };\n    }\n\n\n    handlePlay = () => {\n        const {audio} = this.state;\n\n        if (audio.paused || audio.ended) {\n            audio.play();\n            this.setState({ isPlaying: true });\n        } else {\n            audio.pause();\n            this.setState({ isPlaying: false });\n        }\n    };\n\n\n    getMetadata = () => {\n        const {audio} = this.state;\n        const duration = Math.floor(audio.duration);\n        console.log(duration);\n        // setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n    };\n\n\n    handlePlayNext = () => {\n\n        this.setState({isLoading: true});\n        const {audio} = this.state;\n\n        this.props.playNextAudio();\n\n        audio.src = this.props.audioList[this.props.currentAudio].url;\n\n        audio.onloadedmetadata = () => {\n            console.log(audio.duration);\n            this.setState({\n                isLoading: false,\n                isPlaying: true\n            })\n        };\n        audio.ontimeupdate = () => {\n            this.setState({\n                currentTime: audio.currentTime\n            })\n        };\n        audio.play();\n\n\n\n    };\n\n\n    changeVolume = value => {\n        const {audio} = this.state;\n\n        this.setState({volume: value});\n        audio.volume = value / 100;\n    };\n\n    handleAudioLoop = () => {\n        this.setState({\n            loop: !this.state.loop\n        });\n    };\n\n\n    // componentWillReceiveProps(nextProps, nextContext) {\n    //     this.setNewCurrentAudio(nextProps.currentAudio);\n    // }\n\n\n    componentDidMount() {\n        const {audio} = this.state;\n        audio.onloadedmetadata = () => {\n            this.setState({\n                isLoading: false,\n                duration: audio.duration\n            })\n        };\n        audio.ontimeupdate = () => {\n            this.setState({\n                currentTime: audio.currentTime\n            })\n        }\n    }\n\n\n    render() {\n        const {audio, isPlaying, volume, isLoading, duration, currentTime, loop, handleAudioLoop} = this.state;\n\n        return (\n            <PlayPanel\n                isLoading={isLoading}\n                currentAudioObj={this.props.audioList[this.props.currentAudio]}\n                audio={audio}\n                isPlaying={isPlaying}\n                handlePlay={this.handlePlay}\n                handlePlayNext={this.handlePlayNext}\n                volume={volume}\n                changeVolume={this.changeVolume}\n                duration={duration}\n                currentTime={currentTime}\n                loop={loop}\n                handleAudioLoop={this.handleAudioLoop}\n\n                // defaultValue={defaultValue}\n                // audioPlayer={audioPlayer}\n                // handleMetadata={handleMetadata}\n                // handleTimeupdate={handleTimeupdate}\n                // setAudioDuration={setAudioDuration}\n                // currentTrackMoment={currentTrackMoment}\n                // currentTrackDuration={currentTrackDuration}\n                // currentAudio={currentAudio}\n            />\n        );\n    }\n}\n\nPlayPanelContainer.propTypes = {\n    audioList: PropTypes.array,\n    currentAudio: PropTypes.number,\n    playNextAudio: PropTypes.func,\n};\n\nexport default connect(state => ({\n    audioList: state.audio.audioList,\n    currentAudio: state.audio.currentAudio\n}), {playNextAudio})(PlayPanelContainer);\n\n\n\n\n\n\n\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [loop, setLoop] = useState(false);\n//\n//\n\n\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };"]},"metadata":{},"sourceType":"module"}