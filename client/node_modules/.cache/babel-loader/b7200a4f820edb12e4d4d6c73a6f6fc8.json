{"ast":null,"code":"var _jsxFileName = \"/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { playNextAudio } from '../../modules/audio/audioAction';\nimport PlayPanel from './PlayPanel';\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlay = () => {\n      const audio = this.state.audio;\n\n      if (audio.paused || audio.ended) {\n        audio.play();\n        this.setState({\n          isPlaying: true\n        });\n      } else {\n        audio.pause();\n        this.setState({\n          isPlaying: false\n        });\n      }\n    };\n\n    this.handlePlayNext = () => {\n      this.setState({\n        isLoading: true\n      });\n      const audio = this.state.audio;\n      this.props.playNextAudio(); // audio.src = this.props.audioList[this.props.currentAudio].url;\n      //\n      // audio.onloadedmetadata = () => {\n      //     console.log(audio.duration);\n      //     this.setState({\n      //         isLoading: false,\n      //         isPlaying: true\n      //     })\n      // };\n      // audio.ontimeupdate = () => {\n      //     this.setState({\n      //         currentTime: audio.currentTime\n      //     })\n      // };\n      // audio.play();\n    };\n\n    this.changeVolume = value => {\n      const audio = this.state.audio;\n      this.setState({\n        volume: value\n      });\n      audio.volume = value / 100;\n    };\n\n    this.handleAudioLoop = () => {\n      const audio = this.state.audio;\n      audio.loop = true;\n      this.setState({\n        loop: !this.state.loop\n      });\n    };\n\n    this.state = {\n      audio: null,\n      currentAudio: 0,\n      duration: 0,\n      currentTime: 0,\n      isPlaying: false,\n      isLoading: true,\n      volume: defaultVolume,\n      loop: false\n    };\n  }\n\n  componentDidMount() {\n    const _this$state = this.state,\n          audio = _this$state.audio,\n          currentAudio = _this$state.currentAudio;\n    this.setState({\n      audio: new Audio(this.props.audioList[currentAudio].url)\n    }, () => {\n      const audio = this.state.audio;\n\n      audio.onloadedmetadata = () => {\n        this.setState({\n          isLoading: false,\n          duration: audio.duration\n        });\n      };\n\n      audio.ontimeupdate = () => {\n        this.setState({\n          currentTime: audio.currentTime\n        });\n      };\n    });\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          audio = _this$state2.audio,\n          isPlaying = _this$state2.isPlaying,\n          volume = _this$state2.volume,\n          isLoading = _this$state2.isLoading,\n          duration = _this$state2.duration,\n          currentTime = _this$state2.currentTime,\n          currentAudio = _this$state2.currentAudio,\n          loop = _this$state2.loop;\n    return React.createElement(PlayPanel, {\n      isLoading: isLoading,\n      currentAudioObj: this.props.audioList[currentAudio],\n      audio: audio,\n      isPlaying: isPlaying,\n      handlePlay: this.handlePlay,\n      handlePlayNext: this.handlePlayNext,\n      volume: volume,\n      changeVolume: this.changeVolume,\n      duration: duration,\n      currentTime: currentTime,\n      loop: loop,\n      handleAudioLoop: this.handleAudioLoop // defaultValue={defaultValue}\n      // audioPlayer={audioPlayer}\n      // handleMetadata={handleMetadata}\n      // handleTimeupdate={handleTimeupdate}\n      // setAudioDuration={setAudioDuration}\n      // currentTrackMoment={currentTrackMoment}\n      // currentTrackDuration={currentTrackDuration}\n      // currentAudio={currentAudio}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    });\n  }\n\n}\n\nPlayPanelContainer.propTypes = {\n  audioList: PropTypes.array,\n  playNextAudio: PropTypes.func\n};\nexport default connect(state => ({\n  audioList: state.audio.audioList\n}), {\n  playNextAudio\n})(PlayPanelContainer); // const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [loop, setLoop] = useState(false);\n//\n//\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };","map":{"version":3,"sources":["/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js"],"names":["React","Component","PropTypes","connect","playNextAudio","PlayPanel","defaultVolume","PlayPanelContainer","constructor","props","handlePlay","audio","state","paused","ended","play","setState","isPlaying","pause","handlePlayNext","isLoading","changeVolume","value","volume","handleAudioLoop","loop","currentAudio","duration","currentTime","componentDidMount","Audio","audioList","url","onloadedmetadata","ontimeupdate","render","propTypes","array","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nimport {connect} from 'react-redux';\nimport {playNextAudio} from '../../modules/audio/audioAction';\n\n\n\nimport PlayPanel from './PlayPanel';\n\nconst defaultVolume = 60;\n\nclass PlayPanelContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audio: null,\n            currentAudio: 0,\n            duration: 0,\n            currentTime: 0,\n            isPlaying: false,\n            isLoading: true,\n            volume: defaultVolume,\n            loop: false\n        };\n    }\n\n\n    handlePlay = () => {\n        const {audio} = this.state;\n\n        if (audio.paused || audio.ended) {\n            audio.play();\n            this.setState({ isPlaying: true });\n        } else {\n            audio.pause();\n            this.setState({ isPlaying: false });\n        }\n    };\n\n\n    // getMetadata = () => {\n    //     const {audio} = this.state;\n    //     const duration = Math.floor(audio.duration);\n    //     console.log(duration);\n    // };\n\n\n    handlePlayNext = () => {\n\n        this.setState({isLoading: true});\n        const {audio} = this.state;\n\n        this.props.playNextAudio();\n\n        // audio.src = this.props.audioList[this.props.currentAudio].url;\n        //\n        // audio.onloadedmetadata = () => {\n        //     console.log(audio.duration);\n        //     this.setState({\n        //         isLoading: false,\n        //         isPlaying: true\n        //     })\n        // };\n        // audio.ontimeupdate = () => {\n        //     this.setState({\n        //         currentTime: audio.currentTime\n        //     })\n        // };\n        // audio.play();\n\n\n\n    };\n\n\n    changeVolume = value => {\n        const {audio} = this.state;\n\n        this.setState({volume: value});\n        audio.volume = value / 100;\n    };\n\n    handleAudioLoop = () => {\n        const {audio} = this.state;\n        audio.loop = true;\n        this.setState({\n            loop: !this.state.loop\n        });\n    };\n\n    componentDidMount() {\n        const {audio, currentAudio} = this.state;\n        \n        this.setState({\n            audio: new Audio(this.props.audioList[currentAudio].url),\n        }, () => {\n\n            const {audio} = this.state;\n            audio.onloadedmetadata = () => {\n                this.setState({\n                    isLoading: false,\n                    duration: audio.duration\n                })\n            };\n            audio.ontimeupdate = () => {\n                this.setState({\n                    currentTime: audio.currentTime\n                })\n            }\n        });\n    }\n\n\n    render() {\n        const {audio, isPlaying, volume, isLoading, duration, currentTime, currentAudio, loop} = this.state;\n\n        return (\n            <PlayPanel\n                isLoading={isLoading}\n                currentAudioObj={this.props.audioList[currentAudio]}\n                audio={audio}\n                isPlaying={isPlaying}\n                handlePlay={this.handlePlay}\n                handlePlayNext={this.handlePlayNext}\n                volume={volume}\n                changeVolume={this.changeVolume}\n                duration={duration}\n                currentTime={currentTime}\n                loop={loop}\n                handleAudioLoop={this.handleAudioLoop}\n\n                // defaultValue={defaultValue}\n                // audioPlayer={audioPlayer}\n                // handleMetadata={handleMetadata}\n                // handleTimeupdate={handleTimeupdate}\n                // setAudioDuration={setAudioDuration}\n                // currentTrackMoment={currentTrackMoment}\n                // currentTrackDuration={currentTrackDuration}\n                // currentAudio={currentAudio}\n            />\n        );\n    }\n}\n\nPlayPanelContainer.propTypes = {\n    audioList: PropTypes.array,\n    playNextAudio: PropTypes.func,\n};\n\nexport default connect(state => ({\n    audioList: state.audio.audioList,\n}), {playNextAudio})(PlayPanelContainer);\n\n\n\n\n\n\n\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [loop, setLoop] = useState(false);\n//\n//\n\n\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };"]},"metadata":{},"sourceType":"module"}