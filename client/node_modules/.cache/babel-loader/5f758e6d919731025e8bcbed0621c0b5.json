{"ast":null,"code":"var _jsxFileName = \"/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport PlayPanel from './PlayPanel';\n\nclass PlayPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setNewCurrentAudio = id => {\n      this.state.audio.pause();\n      this.setState({\n        audio: new Audio(this.props.audioList[id].url)\n      }, () => {\n        console.log(new Audio());\n\n        this.state.audio.onloadedmetadata = e => {\n          console.log(e);\n        };\n\n        this.state.audio.play();\n      });\n    };\n\n    this.setCurrentAudioPlay = () => {};\n\n    this.state = {\n      audio: new Audio(props.audioList[props.currentAudio].url)\n    };\n  } // componentWillReceiveProps(nextProps, nextContext) {\n  //     this.setNewCurrentAudio(nextProps.currentAudio);\n  // }\n\n\n  componentDidMount() {// this.state.audio.play();\n    // this.state.audio.ondurationchange = e => {\n    //     console.log(this.state.audio.duration);\n    // }\n  }\n\n  render() {\n    const audio = this.state.audio;\n    return React.createElement(PlayPanel, {\n      audio: audio // loop={loop}\n      // audioPlayer={audioPlayer}\n      // handleMetadata={handleMetadata}\n      // handleTimeupdate={handleTimeupdate}\n      // isPlaying={isPlaying}\n      // handlePlay={handlePlay}\n      // volume={volume}\n      // defaultValue={defaultValue}\n      // changeVolume={changeVolume}\n      // handleAudioLoop={handleAudioLoop}\n      // setAudioDuration={setAudioDuration}\n      // currentTrackMoment={currentTrackMoment}\n      // currentTrackDuration={currentTrackDuration}\n      // currentAudio={currentAudio}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n}\n\nPlayPanelContainer.propTypes = {};\nexport default connect(state => ({\n  audioList: state.audio.audioList,\n  currentAudio: state.audio.currentAudio\n}))(PlayPanelContainer); // import React, {useEffect, useState} from 'react';\n// import PropTypes from 'prop-types';\n// import PlayPanel from './PlayPanel';\n//\n// import {connect} from 'react-redux';\n// import {normalizeAudioCurentTime} from \"../../helpers/helpers\";\n//\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [audioPlayer, setAudioPlayer] = useState(null);\n//\n//     useEffect(() => {\n//         setAudioPlayer(new Audio(audioList[currentAudio].url));\n//     }, []);\n//\n//     const defaultValue = 60;\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [loop, setLoop] = useState(false);\n//     const [volume, setVolume] = useState(defaultValue);\n//     const [progressBarWidth, setProgressBarWidth] = useState('0');\n//     const [currentTrackDuration, setCurrentTrackDuration] = useState(0);\n//     const [currentTrackMoment, setCurrentTrackMoment] = useState(0);\n//\n//\n//     const handlePlay = () => {\n//\n//         if (audioPlayer.paused || audioPlayer.ended) {\n//             audioPlayer.play();\n//             setIsPlaying(true);\n//         } else {\n//             audioPlayer.pause();\n//             setIsPlaying(false);\n//         }\n//     };\n//\n//     const changeVolume = value => {\n//         setVolume(value);\n//         audioPlayer.current.volume = value / 100;\n//     };\n//\n//\n//     const handleAudioLoop = () => {\n//         setLoop(!loop);\n//     };\n//\n//     const handleMetadata = () => {\n//         const audio = audioPlayer.current;\n//\n//         const duration = Math.floor(audio.duration);\n//         setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n//     };\n//\n//\n//     const setAudioDuration = diration => {\n//         audioPlayer.current.currentTime = diration;\n//     };\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };\n//\n// PlayPanelContainer.propTypes = {\n//\n// };\n//\n// export default connect(state => ({\n//     audioList: state.audio.audioList,\n//     currentAudio: state.audio.currentAudio\n// }))(PlayPanelContainer);","map":{"version":3,"sources":["/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js"],"names":["React","Component","PropTypes","connect","PlayPanel","PlayPanelContainer","constructor","props","setNewCurrentAudio","id","state","audio","pause","setState","Audio","audioList","url","console","log","onloadedmetadata","e","play","setCurrentAudioPlay","currentAudio","componentDidMount","render","propTypes"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AAEA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,kBAAN,SAAiCJ,SAAjC,CAA2C;AAEvCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAcnBC,kBAdmB,GAcEC,EAAE,IAAI;AAExB,WAAKC,KAAL,CAAWC,KAAX,CAAiBC,KAAjB;AAEA,WAAKC,QAAL,CAAc;AACVF,QAAAA,KAAK,EAAE,IAAIG,KAAJ,CAAU,KAAKP,KAAL,CAAWQ,SAAX,CAAqBN,EAArB,EAAyBO,GAAnC;AADG,OAAd,EAEG,MAAM;AAELC,QAAAA,OAAO,CAACC,GAAR,CAAY,IAAIJ,KAAJ,EAAZ;;AAEA,aAAKJ,KAAL,CAAWC,KAAX,CAAiBQ,gBAAjB,GAAoCC,CAAC,IAAI;AACrCH,UAAAA,OAAO,CAACC,GAAR,CAAYE,CAAZ;AACH,SAFD;;AAGA,aAAKV,KAAL,CAAWC,KAAX,CAAiBU,IAAjB;AACH,OAVD;AAYF,KA9BkB;;AAAA,SA2CnBC,mBA3CmB,GA2CG,MAAM,CAE3B,CA7CkB;;AAGf,SAAKZ,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IAAIG,KAAJ,CAAUP,KAAK,CAACQ,SAAN,CAAgBR,KAAK,CAACgB,YAAtB,EAAoCP,GAA9C;AADE,KAAb;AAGH,GARsC,CAWvC;AACA;AACA;;;AAsBAQ,EAAAA,iBAAiB,GAAG,CAChB;AAGA;AACA;AACA;AACH;;AAQDC,EAAAA,MAAM,GAAG;AAAA,UAEEd,KAFF,GAEW,KAAKD,KAFhB,CAEEC,KAFF;AAIL,WACI,oBAAC,SAAD;AACI,MAAA,KAAK,EAAEA,KADX,CAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAmBH;;AAzEsC;;AA4E3CN,kBAAkB,CAACqB,SAAnB,GAA+B,EAA/B;AAEA,eAAevB,OAAO,CAACO,KAAK,KAAK;AAC7BK,EAAAA,SAAS,EAAEL,KAAK,CAACC,KAAN,CAAYI,SADM;AAE7BQ,EAAAA,YAAY,EAAEb,KAAK,CAACC,KAAN,CAAYY;AAFG,CAAL,CAAN,CAAP,CAGXlB,kBAHW,CAAfsourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport {connect} from 'react-redux';\n\nimport PlayPanel from './PlayPanel';\n\nclass PlayPanelContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audio: new Audio(props.audioList[props.currentAudio].url)\n        };\n    }\n\n\n    // componentWillReceiveProps(nextProps, nextContext) {\n    //     this.setNewCurrentAudio(nextProps.currentAudio);\n    // }\n\n\n    setNewCurrentAudio = id => {\n\n       this.state.audio.pause();\n\n       this.setState({\n           audio: new Audio(this.props.audioList[id].url)\n       }, () => {\n\n           console.log(new Audio);\n\n           this.state.audio.onloadedmetadata = e => {\n               console.log(e);\n           };\n           this.state.audio.play();\n       });\n\n    };\n\n\n    componentDidMount() {\n        // this.state.audio.play();\n\n\n        // this.state.audio.ondurationchange = e => {\n        //     console.log(this.state.audio.duration);\n        // }\n    }\n\n\n    setCurrentAudioPlay = () => {\n\n    };\n\n\n    render() {\n\n        const {audio} = this.state;  \n\n        return (\n            <PlayPanel\n                audio={audio}\n                // loop={loop}\n                // audioPlayer={audioPlayer}\n                // handleMetadata={handleMetadata}\n                // handleTimeupdate={handleTimeupdate}\n                // isPlaying={isPlaying}\n                // handlePlay={handlePlay}\n                // volume={volume}\n                // defaultValue={defaultValue}\n                // changeVolume={changeVolume}\n                // handleAudioLoop={handleAudioLoop}\n                // setAudioDuration={setAudioDuration}\n                // currentTrackMoment={currentTrackMoment}\n                // currentTrackDuration={currentTrackDuration}\n                // currentAudio={currentAudio}\n            />\n        );\n    }\n}\n\nPlayPanelContainer.propTypes = {};\n\nexport default connect(state => ({\n    audioList: state.audio.audioList,\n    currentAudio: state.audio.currentAudio\n}))(PlayPanelContainer);\n\n\n\n\n\n\n// import React, {useEffect, useState} from 'react';\n// import PropTypes from 'prop-types';\n// import PlayPanel from './PlayPanel';\n//\n// import {connect} from 'react-redux';\n// import {normalizeAudioCurentTime} from \"../../helpers/helpers\";\n//\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [audioPlayer, setAudioPlayer] = useState(null);\n//\n//     useEffect(() => {\n//         setAudioPlayer(new Audio(audioList[currentAudio].url));\n//     }, []);\n//\n//     const defaultValue = 60;\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [loop, setLoop] = useState(false);\n//     const [volume, setVolume] = useState(defaultValue);\n//     const [progressBarWidth, setProgressBarWidth] = useState('0');\n//     const [currentTrackDuration, setCurrentTrackDuration] = useState(0);\n//     const [currentTrackMoment, setCurrentTrackMoment] = useState(0);\n//\n//\n//     const handlePlay = () => {\n//\n//         if (audioPlayer.paused || audioPlayer.ended) {\n//             audioPlayer.play();\n//             setIsPlaying(true);\n//         } else {\n//             audioPlayer.pause();\n//             setIsPlaying(false);\n//         }\n//     };\n//\n//     const changeVolume = value => {\n//         setVolume(value);\n//         audioPlayer.current.volume = value / 100;\n//     };\n//\n//\n//     const handleAudioLoop = () => {\n//         setLoop(!loop);\n//     };\n//\n//     const handleMetadata = () => {\n//         const audio = audioPlayer.current;\n//\n//         const duration = Math.floor(audio.duration);\n//         setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n//     };\n//\n//\n//     const setAudioDuration = diration => {\n//         audioPlayer.current.currentTime = diration;\n//     };\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };\n//\n// PlayPanelContainer.propTypes = {\n//\n// };\n//\n// export default connect(state => ({\n//     audioList: state.audio.audioList,\n//     currentAudio: state.audio.currentAudio\n// }))(PlayPanelContainer);"]},"metadata":{},"sourceType":"module"}