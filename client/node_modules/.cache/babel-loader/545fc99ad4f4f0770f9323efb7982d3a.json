{"ast":null,"code":"var _jsxFileName = \"/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { playNextAudio } from '../../modules/audio/audioAction';\nimport PlayPanel from './PlayPanel';\n\nclass PlayPanelContainer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlePlay = () => {\n      const audio = this.state.audio;\n\n      if (audio.paused || audio.ended) {\n        audio.play();\n        this.setState({\n          isPlaying: true\n        });\n      } else {\n        audio.pause();\n        this.setState({\n          isPlaying: false\n        });\n      }\n    };\n\n    this.handlePlayNext = () => {\n      const audio = this.state.audio;\n      audio.pause();\n      debugger;\n      this.props.playNextAudio();\n      this.setState({\n        audio: new Audio(this.props.audioList[this.props.currentAudio].url)\n      }, () => {\n        audio.play();\n      });\n    };\n\n    this.setNewCurrentAudio = id => {\n      this.state.audio.pause();\n      this.setState({\n        audio: new Audio(this.props.audioList[id].url)\n      }, () => {\n        console.log(new Audio());\n\n        this.state.audio.onloadedmetadata = e => {\n          console.log(e);\n        };\n\n        this.state.audio.play();\n      });\n    };\n\n    this.setCurrentAudioPlay = () => {};\n\n    this.state = {\n      audio: new Audio(props.audioList[props.currentAudio].url),\n      isPlaying: false\n    };\n  }\n\n  componentDidMount() {// this.state.audio.play();\n    // this.state.audio.ondurationchange = e => {\n    //     console.log(this.state.audio.duration);\n    // }\n  }\n\n  render() {\n    const _this$state = this.state,\n          audio = _this$state.audio,\n          isPlaying = _this$state.isPlaying;\n    return React.createElement(PlayPanel, {\n      audio: audio,\n      isPlaying: isPlaying,\n      handlePlay: this.handlePlay,\n      handlePlayNext: this.handlePlayNext // loop={loop}\n      // audioPlayer={audioPlayer}\n      // handleMetadata={handleMetadata}\n      // handleTimeupdate={handleTimeupdate}\n      // volume={volume}\n      // defaultValue={defaultValue}\n      // changeVolume={changeVolume}\n      // handleAudioLoop={handleAudioLoop}\n      // setAudioDuration={setAudioDuration}\n      // currentTrackMoment={currentTrackMoment}\n      // currentTrackDuration={currentTrackDuration}\n      // currentAudio={currentAudio}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    });\n  }\n\n}\n\nPlayPanelContainer.propTypes = {\n  audioList: PropTypes.array,\n  currentAudio: PropTypes.number,\n  playNextAudio: PropTypes.func\n};\nexport default connect(state => ({\n  audioList: state.audio.audioList,\n  currentAudio: state.audio.currentAudio\n}), {\n  playNextAudio\n})(PlayPanelContainer); // import React, {useEffect, useState} from 'react';\n// import PropTypes from 'prop-types';\n// import PlayPanel from './PlayPanel';\n//\n// import {connect} from 'react-redux';\n// import {normalizeAudioCurentTime} from \"../../helpers/helpers\";\n//\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [audioPlayer, setAudioPlayer] = useState(null);\n//\n//     useEffect(() => {\n//         setAudioPlayer(new Audio(audioList[currentAudio].url));\n//     }, []);\n//\n//     const defaultValue = 60;\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [loop, setLoop] = useState(false);\n//     const [volume, setVolume] = useState(defaultValue);\n//     const [progressBarWidth, setProgressBarWidth] = useState('0');\n//     const [currentTrackDuration, setCurrentTrackDuration] = useState(0);\n//     const [currentTrackMoment, setCurrentTrackMoment] = useState(0);\n//\n//     const changeVolume = value => {\n//         setVolume(value);\n//         audioPlayer.current.volume = value / 100;\n//     };\n//\n//\n//     const handleAudioLoop = () => {\n//         setLoop(!loop);\n//     };\n//\n//     const handleMetadata = () => {\n//         const audio = audioPlayer.current;\n//\n//         const duration = Math.floor(audio.duration);\n//         setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n//     };\n//\n//\n//     const setAudioDuration = diration => {\n//         audioPlayer.current.currentTime = diration;\n//     };\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };\n//\n// PlayPanelContainer.propTypes = {\n//\n// };\n//\n// export default connect(state => ({\n//     audioList: state.audio.audioList,\n//     currentAudio: state.audio.currentAudio\n// }))(PlayPanelContainer);","map":{"version":3,"sources":["/Grawdanin/MERN/audio/src/components/PlayPanel/PlayPanelContainer.js"],"names":["React","Component","PropTypes","connect","playNextAudio","PlayPanel","PlayPanelContainer","constructor","props","handlePlay","audio","state","paused","ended","play","setState","isPlaying","pause","handlePlayNext","Audio","audioList","currentAudio","url","setNewCurrentAudio","id","console","log","onloadedmetadata","e","setCurrentAudioPlay","componentDidMount","render","propTypes","array","number","func"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\n\n\nimport {connect} from 'react-redux';\nimport {playNextAudio} from '../../modules/audio/audioAction';\n\nimport PlayPanel from './PlayPanel';\n\n\nclass PlayPanelContainer extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            audio: new Audio(props.audioList[props.currentAudio].url),\n            isPlaying: false\n        };\n    }\n\n\n    handlePlay = () => {\n        const {audio} = this.state;\n\n        if (audio.paused || audio.ended) {\n            audio.play();\n            this.setState({ isPlaying: true })\n        } else {\n            audio.pause();\n            this.setState({ isPlaying: false })\n        }\n    };\n\n\n    handlePlayNext = () => {\n        const {audio} = this.state;\n        audio.pause();\n\n        debugger\n        this.props.playNextAudio();\n        this.setState({\n            audio: new Audio(this.props.audioList[this.props.currentAudio].url),\n        }, () => {\n            audio.play();\n        })\n\n    };\n\n\n    // componentWillReceiveProps(nextProps, nextContext) {\n    //     this.setNewCurrentAudio(nextProps.currentAudio);\n    // }\n\n\n    setNewCurrentAudio = id => {\n\n       this.state.audio.pause();\n\n       this.setState({\n           audio: new Audio(this.props.audioList[id].url)\n       }, () => {\n\n           console.log(new Audio);\n\n           this.state.audio.onloadedmetadata = e => {\n               console.log(e);\n           };\n           this.state.audio.play();\n       });\n\n    };\n\n\n    componentDidMount() {\n        // this.state.audio.play();\n\n\n        // this.state.audio.ondurationchange = e => {\n        //     console.log(this.state.audio.duration);\n        // }\n    }\n\n\n    setCurrentAudioPlay = () => {\n\n    };\n\n\n    render() {\n\n        const {audio, isPlaying} = this.state;\n\n        return (\n            <PlayPanel\n                audio={audio}\n                isPlaying={isPlaying}\n                handlePlay={this.handlePlay}\n                handlePlayNext={this.handlePlayNext}\n                // loop={loop}\n                // audioPlayer={audioPlayer}\n                // handleMetadata={handleMetadata}\n                // handleTimeupdate={handleTimeupdate}\n                // volume={volume}\n                // defaultValue={defaultValue}\n                // changeVolume={changeVolume}\n                // handleAudioLoop={handleAudioLoop}\n                // setAudioDuration={setAudioDuration}\n                // currentTrackMoment={currentTrackMoment}\n                // currentTrackDuration={currentTrackDuration}\n                // currentAudio={currentAudio}\n            />\n        );\n    }\n}\n\nPlayPanelContainer.propTypes = {\n    audioList: PropTypes.array,\n    currentAudio: PropTypes.number,\n    playNextAudio: PropTypes.func,\n};\n\nexport default connect(state => ({\n    audioList: state.audio.audioList,\n    currentAudio: state.audio.currentAudio\n}), {playNextAudio})(PlayPanelContainer);\n\n\n\n\n\n\n// import React, {useEffect, useState} from 'react';\n// import PropTypes from 'prop-types';\n// import PlayPanel from './PlayPanel';\n//\n// import {connect} from 'react-redux';\n// import {normalizeAudioCurentTime} from \"../../helpers/helpers\";\n//\n// const PlayPanelContainer = ({audioList, currentAudio}) => {\n//\n//\n//     const [audioPlayer, setAudioPlayer] = useState(null);\n//\n//     useEffect(() => {\n//         setAudioPlayer(new Audio(audioList[currentAudio].url));\n//     }, []);\n//\n//     const defaultValue = 60;\n//     const [isPlaying, setIsPlaying] = useState(false);\n//     const [loop, setLoop] = useState(false);\n//     const [volume, setVolume] = useState(defaultValue);\n//     const [progressBarWidth, setProgressBarWidth] = useState('0');\n//     const [currentTrackDuration, setCurrentTrackDuration] = useState(0);\n//     const [currentTrackMoment, setCurrentTrackMoment] = useState(0);\n//\n//     const changeVolume = value => {\n//         setVolume(value);\n//         audioPlayer.current.volume = value / 100;\n//     };\n//\n//\n//     const handleAudioLoop = () => {\n//         setLoop(!loop);\n//     };\n//\n//     const handleMetadata = () => {\n//         const audio = audioPlayer.current;\n//\n//         const duration = Math.floor(audio.duration);\n//         setCurrentTrackDuration(normalizeAudioCurentTime(duration));\n//     };\n//\n//\n//     const setAudioDuration = diration => {\n//         audioPlayer.current.currentTime = diration;\n//     };\n//\n//\n//     const handleTimeupdate = () => {\n//         setCurrentTrackMoment(Math.floor(audioPlayer.current.currentTime));\n//         setProgressBarWidth(\n//             (audioPlayer.current.currentTime / audioPlayer.current.duration) * 100 + '%'\n//         );\n//         if (audioPlayer.current.currentTime === audioPlayer.current.duration) {\n//             alert('end');\n//         }\n//     };\n//\n//\n//\n//     return (\n//         <PlayPanel\n//             audioList={audioList}\n//             loop={loop}\n//             audioPlayer={audioPlayer}\n//             handleMetadata={handleMetadata}\n//             handleTimeupdate={handleTimeupdate}\n//             isPlaying={isPlaying}\n//             handlePlay={handlePlay}\n//             volume={volume}\n//             defaultValue={defaultValue}\n//             changeVolume={changeVolume}\n//             handleAudioLoop={handleAudioLoop}\n//             setAudioDuration={setAudioDuration}\n//             currentTrackMoment={currentTrackMoment}\n//             currentTrackDuration={currentTrackDuration}\n//             currentAudio={currentAudio}\n//         />\n//     );\n//\n// };\n//\n// PlayPanelContainer.propTypes = {\n//\n// };\n//\n// export default connect(state => ({\n//     audioList: state.audio.audioList,\n//     currentAudio: state.audio.currentAudio\n// }))(PlayPanelContainer);"]},"metadata":{},"sourceType":"module"}