{"ast":null,"code":"export const normalizeAudioCurentTime = time => {\n  if (time === 0) {\n    return '0:00';\n  }\n\n  const minutes = Math.floor(time / 60);\n  const seconds = Math.floor(time - minutes * 60);\n  return \"\".concat(minutes, \":\").concat(seconds >= 10 ? seconds : '0' + seconds);\n};\nexport const formatSecondsAsTime = time => {\n  var hr = Math.floor(time / 3600);\n  var min = Math.floor((time - hr * 3600) / 60);\n  var sec = Math.floor(time - hr * 3600 - min * 60);\n\n  if (min < 10) {\n    min = \"0\" + min;\n  }\n\n  if (sec < 10) {\n    sec = \"0\" + sec;\n  }\n\n  return \"\".concat(hr > 0 ? hr + ':' + min + ':' + sec : min + ':' + sec);\n};","map":{"version":3,"sources":["/Grawdanin/MERN/audio/client/src/helpers/helpers.js"],"names":["normalizeAudioCurentTime","time","minutes","Math","floor","seconds","formatSecondsAsTime","hr","min","sec"],"mappings":"AAAA,OAAO,MAAMA,wBAAwB,GAAGC,IAAI,IAAI;AAC5C,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACZ,WAAO,MAAP;AACH;;AACD,QAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,EAAlB,CAAhB;AACA,QAAMI,OAAO,GAAGF,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAGC,OAAO,GAAG,EAA5B,CAAhB;AACA,mBAAUA,OAAV,cAAsBG,OAAO,IAAI,EAAZ,GAAkBA,OAAlB,GAA4B,MAAMA,OAAvD;AACH,CAPM;AAUP,OAAO,MAAMC,mBAAmB,GAAGL,IAAI,IAAI;AACvC,MAAIM,EAAE,GAAIJ,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAG,IAAlB,CAAV;AACA,MAAIO,GAAG,GAAGL,IAAI,CAACC,KAAL,CAAW,CAACH,IAAI,GAAIM,EAAE,GAAG,IAAd,IAAqB,EAAhC,CAAV;AACA,MAAIE,GAAG,GAAGN,IAAI,CAACC,KAAL,CAAWH,IAAI,GAAIM,EAAE,GAAG,IAAb,GAAuBC,GAAG,GAAG,EAAxC,CAAV;;AAEA,MAAIA,GAAG,GAAG,EAAV,EAAa;AACTA,IAAAA,GAAG,GAAG,MAAMA,GAAZ;AACH;;AACD,MAAIC,GAAG,GAAG,EAAV,EAAa;AACTA,IAAAA,GAAG,GAAI,MAAMA,GAAb;AACH;;AAED,mBAAWF,EAAE,GAAG,CAAN,GAAYA,EAAE,GAAG,GAAL,GAAWC,GAAX,GAAiB,GAAjB,GAAuBC,GAAnC,GAA2CD,GAAG,GAAG,GAAN,GAAYC,GAAjE;AACH,CAbM","sourcesContent":["export const normalizeAudioCurentTime = time => {\n    if (time === 0) {\n        return '0:00';\n    }\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time - minutes * 60);\n    return `${minutes}:${(seconds >= 10) ? seconds : '0' + seconds}`;\n};\n\n\nexport const formatSecondsAsTime = time => {\n    var hr  = Math.floor(time / 3600);\n    var min = Math.floor((time - (hr * 3600))/60);\n    var sec = Math.floor(time - (hr * 3600) -  (min * 60));\n\n    if (min < 10){\n        min = \"0\" + min;\n    }\n    if (sec < 10){\n        sec  = \"0\" + sec;\n    }\n\n    return `${(hr > 0) ? (hr + ':' + min + ':' + sec) : (min + ':' + sec)}`;\n};"]},"metadata":{},"sourceType":"module"}